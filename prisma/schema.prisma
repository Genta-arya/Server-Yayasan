// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String?
  email        String?
  password     String
  status_login Boolean  @default(false)
  avatar       String?
  role         String   @default("admin")
  token        String?  @db.Text
  createdAt    DateTime @default(now())
}

model Posting {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.LongText
  author    String
  thumbnail String   @db.Text
  slug      String
  kategori  String
  isArsip   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  comments  Comment[]
  analytics Analytic?
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  name      String
  postingId String
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  posting   Posting  @relation(fields: [postingId], references: [id])
}

model Analytic {
  id        String    @id @default(uuid())
  postingId String    @unique
  views     Int       @default(0)
  likes     Int       @default(0)
  unlikes   Int       @default(0)
  avgIp     String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  likeLogs  LikeLog[]
  posting   Posting   @relation(fields: [postingId], references: [id])
  viewLogs  ViewLog[] // Relasi ke banyak log akses
}

model ViewLog {
  id         String   @id @default(uuid())
  analyticId String
  ipAddress  String   @db.VarChar(45)
  userAgent  String   @db.Text
  country    String?
  city       String?
  accessedAt DateTime @default(now())

  analytic Analytic @relation(fields: [analyticId], references: [id])
}

model LikeLog {
  id        String   @id @default(uuid())
  postingId String
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())

  Analytic Analytic @relation(fields: [postingId], references: [postingId])
}

model SPMB {
  id        String   @id @default(uuid())
  judul     String
  konten    String?  @db.LongText
  type      String   @unique
  status    Boolean  @default(true)
  header    String?
  url_icon  String // <--- bukan enum, bebas
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id         String   @id @default(uuid())
  url        String
  order      Int?
  spmbId     String
  spmb       SPMB     @relation(fields: [spmbId], references: [id], onDelete: Cascade)
  uploadedAt DateTime @default(now())
}

model Slider {
  id     String        @id @default(uuid())
  images ImageSlider[]
}

model ImageSlider {
  id        String  @id @default(uuid())
  url       String
  index     Int     // <-- tambahin ini
  sliderId  String
  slider    Slider  @relation(fields: [sliderId], references: [id])
}
